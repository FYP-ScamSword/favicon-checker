# -*- coding: utf-8 -*-
"""Image Similarity Checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D3Sl5VNUk1TKiZ32umO9Ye9c3iDb2VI4
"""
#import sys
import os
#import csv
import numpy as np
#from PIL import Image
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
#from google.colab import  drive
import matplotlib.pyplot as plt
from scipy.spatial.distance import cosine
from sklearn.neighbors import NearestNeighbors
#drive.mount('/content/drive/')

model = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

def extract_features(img_path):
    img = tf.keras.preprocessing.image.load_img(img_path, target_size=(32, 32))
    x = tf.keras.preprocessing.image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    #x = x/255.0
    features = model.predict(x)
    features1 = features.flatten()
    features2 = np.reshape(features, (features.shape[0], -1))
    return features1, features2


def createFileList(myDir, format='.png'):
    fileList = []
    print(myDir)
    #labels = []
    names = []
    #keywords = {"B" : "0","E": "1","G": "2"} # keys and values to be changed as needed
    for root, dirs, files in os.walk(myDir, topdown=True):
        for name in files:
            fullName = os.path.join(root, name)
            fileList.append(fullName)
            names.append(name)
    return fileList, names

# load the original image
myFileList, names  = createFileList('/content/drive/My Drive/Final_Year_Project/ML/Favicons/')
print(myFileList)

images = []
features2 = []
for file in myFileList:
    feature1, feature2 = extract_features(file)
    images.append(feature1)
    features2.append(feature2)

img = tf.keras.preprocessing.image.load_img(myFileList[20])
plt.imshow(img)


metric = 'cosine'

distances = []
for image in images:
  distance = cosine(images[0], image)
  distances.append(distance)
#dc = distance.cdist([images[0]], [images[0]], metric)[0]
#print(dc)
#print("the distance between bos and bos is {}".format(distance))
for distance in distances:
  if distance == 0:
    print(distances.index(distance))

def find_similar_images(query_img_features, features2, k=5):
	# Extract features from the query image
	#query_features = extract_features(img_path)

	# Extract features from the images in the dataset
  dataset_features = features2
  dataset_features = np.vstack(dataset_features)
	
	# Find the k most similar images using the nearest neighbors algorithm
  neighbors = NearestNeighbors(n_neighbors=k, metric='cosine')
  neighbors.fit(dataset_features)
  distances, indices = neighbors.kneighbors(query_img_features)
	
  # Return the filenames of the most similar images
  filenames = []
  for i in indices[0]:
    filename = myFileList[i]
    filenames.append(filename)
  return filenames

#query_image = 'query_image.jpg'
#dataset_path = 'dataset'
similar_images = find_similar_images(features2[20], features2, k=5)
#for image in similar_images:
result = []
for i in similar_images:
  img = tf.keras.preprocessing.image.load_img(i)
  result.append(img)
#img = tf.keras.preprocessing.image.load_img(similar_images[0])
#for i in result:
 # plt.imshow(i)

plt.figure()

#subplot(r,c) provide the no. of rows and columns
f, axarr = plt.subplots(5,1) 

# use the created array to output your multiple images. In this case I have stacked 4 images vertically
axarr[0].imshow(result[0])
axarr[1].imshow(result[1])
axarr[2].imshow(result[2])
axarr[3].imshow(result[3])
axarr[4].imshow(result[4])